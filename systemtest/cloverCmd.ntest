# -*-Perl-*-

# cloverCmd.ntest -
#
# Exercise basic components of EC-Clover-CMD plugin
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use ECTest;

require "$::gTestFileDir/cloverCmd-common.ntest";

# read in setup and tests that are common to all EC-Clover-CMD plugin archives
# system tests


ntest "check-runCloverCmd-present", {}, sub {
    # Check that the plugin contains required components
    my $xpath = $::N->getSteps("$::gPlugin_name","runCloverCmd");
    assertOK($xpath,"get steps");
    assertEq("createCommandLine", $xpath->findvalue("//step[1]/stepName"), "step 1: createCommandLine");
    assertEq("runCommandLine", $xpath->findvalue("//step[2]/stepName"), "step 2: runCommandLine");

};

ntest "check-runCloverInstr-present", {}, sub {
    # Check that the plugin contains required components
    my $xpath = $::N->getSteps("$::gPlugin_name","runCloverInstr");
    assertOK($xpath,"get steps");
    assertEq("createCommandLine", $xpath->findvalue("//step[1]/stepName"), "step 1: createCommandLine");
    assertEq("runCommandLine", $xpath->findvalue("//step[2]/stepName"), "step 2: runCommandLine");

};

ntest "check-runCloverReport-present", {}, sub {
    # Check that the plugin contains required components
    my $xpath = $::N->getSteps("$::gPlugin_name","runCloverReport");
    assertOK($xpath,"get steps");
    assertEq("createCommandLine", $xpath->findvalue("//step[1]/stepName"), "step 1: createCommandLine");
    assertEq("runCommandLine", $xpath->findvalue("//step[2]/stepName"), "step 2: runCommandLine");

};

ntest "check-runCloverMerge-present", {}, sub {
    # Check that the plugin contains required components
    my $xpath = $::N->getSteps("$::gPlugin_name","runCloverMerge");
    assertOK($xpath,"get steps");
    assertEq("createCommandLine", $xpath->findvalue("//step[1]/stepName"), "step 1: createCommandLine");
    assertEq("runCommandLine", $xpath->findvalue("//step[2]/stepName"), "step 2: runCommandLine");

};
