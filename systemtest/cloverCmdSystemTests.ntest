# -*-Perl-*-

# CloverCmdSystemTests.ntest -
#
# ECClover-CMD
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use ECTest;
use ECSelenium;

 
# system tests


require "$::gTestFileDir/cloverCmd-common.ntest";

$::gProjectImported = 0;
$::gtestProjectName = 'CloverCMDTestProject';

my $outcome = '';

########################################################################
# importProject - imports the test project and asserts that the specified
#                 procedures exists
#
# Arguments:
#   -none
#
# Returns:
#   -nothing
#
########################################################################
sub importProject() {
 
    #assert project exists and is imported
    assertOK($::N->import(
             { file =>"$::gTestFileDir/cloverCmdSystemTests.xml",
               path  => "/projects/CloverCMDTestProject",
               force => 1
             } ), 'import runCommandLine');
   
   #assert all given procedures exist
   
#    assertOK($::N->getProcedure($::gtestProjectName, 'executeCloverCMDMerging'),
#    'executeCloverCMDMerging procedure doesn\'t exist');
#    
#    assertOK($::N->getProcedure($::gtestProjectName, 'executeCloverCMDWithAllOptionsNoMerge'),
#    'executeCloverCMDWithAllOptionsNoMerge procedure doesn\'t exist');
#    
#    assertOK($::N->getProcedure($::gtestProjectName, 'executeCloverCMDWithConsoleReporting'),
#    'executeCloverCMDWithConsoleReporting procedure doesn\'t exist'); 
#
#    assertOK($::N->getProcedure($::gtestProjectName, 'executeCloverCMDWithRequiredOptions'),
#    'executeCloverCMDWithRequiredOptions procedure doesn\'t exist'); 
#
#    assertOK($::N->getProcedure($::gtestProjectName, 'executeCloverInstrumentWithAllOptions'),
#    'executeCloverInstrumentWithAllOptions procedure doesn\'t exist'); 
#    
#    assertOK($::N->getProcedure($::gtestProjectName, 'executeCloverInstrumentWithRequiredOptions'),
#    'executeCloverInstrumentWithRequiredOptions procedure doesn\'t exist'); 
#    
#    assertOK($::N->getProcedure($::gtestProjectName, 'executeCloverMergeWithAllOptions'),
#    'runCloverMergeWithAllOptions procedure doesn\'t exist'); 
#    
#    assertOK($::N->getProcedure($::gtestProjectName, 'executeCloverMergeWithRequiredOptions'),
#    'runCloverMergeWithRequiredOptions procedure doesn\'t exist'); 
#    
#    assertOK($::N->getProcedure($::gtestProjectName, 'executeCloverReportWithAllOptions'),
#    'runCloverReportWithAllOptions procedure doesn\'t exist');         
#    
#    assertOK($::N->getProcedure($::gtestProjectName, 'executeCloverReportWithRequiredOptions'),
#    'runCloverReportWithRequiredOptions procedure doesn\'t exist');     
#    
    $::gProjectImported = 1;
}

########################################################################
# doSetup - invokes the project import method in case it hasn't been 
#           executed
#
# Arguments:
#   -none
#
# Returns:
#   -nothing
#
########################################################################
sub doSetup() {

    if(! $::gProjectImported) {
        importProject();
    }
    
    
}

ntest "executeCloverCMDMerging", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeCloverCMDMerging",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $instrumentCommandLine = $xpath->findvalue("//property[propertyName='instrumentCommandLine']/value");
      my $compileCommandLine = $xpath->findvalue("//property[propertyName='compileCommandLine']/value");
      my $testCommandLine = $xpath->findvalue("//property[propertyName='testCommandLine']/value");
      my $mergeCommandLine = $xpath->findvalue("//property[propertyName='mergeCommandLine']/value");
      my $reportingCommandLine = $xpath->findvalue("//property[propertyName='reportingCommandLine']/value");

      my $workingDir = $xpath->findvalue("//property[propertyName='workingdirectory']/value");

      assertEq($instrumentCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java -cp "E:\clover-ant-3.0.2\clover-ant-3.0.2\lib\*" com.cenqua.clover.CloverInstr --srcdir "E:\Electric Cloud\Plugins\emake\Java-EMMATest-StupidHelloWorld\src" --destdir "instr" --initstring "clover.db"', 
           'instrument command line doesn\'t match expected output');
           
      assertEq($compileCommandLine, 'javac -cp "E:\clover-ant-3.0.2\clover-ant-3.0.2\lib\*" "instr\stupid\Main.java"', 
           'compile command line doesn\'t match expected output');
           
      assertEq($testCommandLine, 'java -jar "E:\Electric Cloud\Plugins\emake\Java-EMMATest-StupidHelloWorld\StupidTest.jar"', 
           'test command line doesn\'t match expected output');
           
      assertEq($mergeCommandLine, 'java -cp "E:\clover-ant-3.0.2\clover-ant-3.0.2\lib\*" com.cenqua.clover.CloverMerge --initstring new.db clover.db', 
           'merge command line doesn\'t match expected output');
           
      assertEq($reportingCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java -cp "E:\clover-ant-3.0.2\clover-ant-3.0.2\lib\*" com.cenqua.clover.reporters.xml.XMLReporter --initstring "clover.db" -p "E:\Electric Cloud\Plugins\emake\Java-EMMATest-StupidHelloWorld\src" -o "report.xml"', 
           'reporting command line doesn\'t match expected output');        
           
      assertEq($workingDir, '', 
           'working directory doesn\'t match expected output');

  };
  
ntest "executeCloverCMDWithAllOptionsNoMerge", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeCloverCMDWithAllOptionsNoMerge",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $instrumentCommandLine = $xpath->findvalue("//property[propertyName='instrumentCommandLine']/value");
      my $compileCommandLine = $xpath->findvalue("//property[propertyName='compileCommandLine']/value");
      my $testCommandLine = $xpath->findvalue("//property[propertyName='testCommandLine']/value");
      my $mergeCommandLine = $xpath->findvalue("//property[propertyName='mergeCommandLine']/value");
      my $reportingCommandLine = $xpath->findvalue("//property[propertyName='reportingCommandLine']/value");

      my $workingDir = $xpath->findvalue("//property[propertyName='workingdirectory']/value");

      assertEq($instrumentCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java -cp "E:\clover-ant-3.0.2\clover-ant-3.0.2\lib\*" com.cenqua.clover.CloverInstr --verbose --srcdir "E:\Electric Cloud\Plugins\emake\Java-EMMATest-StupidHelloWorld\src" --destdir "instr" --initstring "clover69.db"', 
           'instrument command line doesn\'t match expected output');
           
      assertEq($compileCommandLine, 'javac -cp "E:\clover-ant-3.0.2\clover-ant-3.0.2\lib\*" "instr\stupid\Main.java"', 
           'compile command line doesn\'t match expected output');
           
      assertEq($testCommandLine, 'java -jar "E:\Electric Cloud\Plugins\emake\Java-EMMATest-StupidHelloWorld\StupidTest.jar"', 
           'test command line doesn\'t match expected output');
           
      assertEq($mergeCommandLine, '', 
           'merge command line doesn\'t match expected output');
           
      assertEq($reportingCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java -cp "E:\clover-ant-3.0.2\clover-ant-3.0.2\lib\*" com.cenqua.clover.reporters.html.HtmlReporter --verbose --initstring "clover69.db" -p "E:\Electric Cloud\Plugins\emake\Java-EMMATest-StupidHelloWorld\src" -a -o htmlReport', 
           'reporting command line doesn\'t match expected output');        
           
      assertEq($workingDir, '', 
           'working directory doesn\'t match expected output');

  };
  
  ntest "executeCloverCMDWithConsoleReporting", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeCloverCMDWithConsoleReporting",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }
      
      # get the job details
      $xpath = $::N->getJobDetails($jobId);
      


      # get the value of the commands lines
      my $instrumentCommandLine = $xpath->findvalue("//property[propertyName='instrumentCommandLine']/value");
      my $compileCommandLine = $xpath->findvalue("//property[propertyName='compileCommandLine']/value");
      my $testCommandLine = $xpath->findvalue("//property[propertyName='testCommandLine']/value");
      my $mergeCommandLine = $xpath->findvalue("//property[propertyName='mergeCommandLine']/value");
      my $reportingCommandLine = $xpath->findvalue("//property[propertyName='reportingCommandLine']/value");

      my $workingDir = $xpath->findvalue("//property[propertyName='workingdirectory']/value");

      assertEq($instrumentCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java -cp "E:\clover-ant-3.0.2\clover-ant-3.0.2\lib\*" com.cenqua.clover.CloverInstr --srcdir "instrumented" --destdir "E:\Electric Cloud\Plugins\emake\Java-EMMATest-StupidHelloWorld\src" --initstring "mydb.db"', 
           'instrument command line doesn\'t match expected output');
           
      assertEq($compileCommandLine, 'javac -cp "E:\clover-ant-3.0.2\clover-ant-3.0.2\lib\*" "instr\stupid\Main.java"', 
           'compile command line doesn\'t match expected output');
           
      assertEq($testCommandLine, 'java -jar "E:\Electric Cloud\Plugins\emake\Java-EMMATest-StupidHelloWorld\StupidTest.jar"', 
           'test command line doesn\'t match expected output');
           
      assertEq($mergeCommandLine, '', 
           'merge command line doesn\'t match expected output');
           
      assertEq($reportingCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java -cp "E:\clover-ant-3.0.2\clover-ant-3.0.2\lib\*" com.cenqua.clover.reporters.console.ConsoleReporter --initstring "mydb.db" -p "instrumented"', 
           'reporting command line doesn\'t match expected output');        
           
      assertEq($workingDir, '', 
           'working directory doesn\'t match expected output');

  };
  
  ntest "executeCloverCMDWithRequiredOptions", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeCloverCMDWithRequiredOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $instrumentCommandLine = $xpath->findvalue("//property[propertyName='instrumentCommandLine']/value");
      my $compileCommandLine = $xpath->findvalue("//property[propertyName='compileCommandLine']/value");
      my $testCommandLine = $xpath->findvalue("//property[propertyName='testCommandLine']/value");
      my $mergeCommandLine = $xpath->findvalue("//property[propertyName='mergeCommandLine']/value");
      my $reportingCommandLine = $xpath->findvalue("//property[propertyName='reportingCommandLine']/value");

      my $workingDir = $xpath->findvalue("//property[propertyName='workingdirectory']/value");

      assertEq($instrumentCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java com.cenqua.clover.CloverInstr --srcdir "E:\Electric Cloud\Plugins\emake\Java-EMMATest-StupidHelloWorld\src" --destdir "instr"', 
           'instrument command line doesn\'t match expected output');
           
      assertEq($compileCommandLine, 'javac -cp "E:\clover-ant-3.0.2\clover-ant-3.0.2\lib\*" "instr\stupid\Main.java"', 
           'compile command line doesn\'t match expected output');
           
      assertEq($testCommandLine, 'java -jar "E:\Electric Cloud\Plugins\emake\Java-EMMATest-StupidHelloWorld\StupidTest.jar"', 
           'test command line doesn\'t match expected output');
           
      assertEq($mergeCommandLine, '', 
           'merge command line doesn\'t match expected output');
           
      assertEq($reportingCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java com.cenqua.clover.reporters.html.HtmlReporter -p "E:\Electric Cloud\Plugins\emake\Java-EMMATest-StupidHelloWorld\src" -o htmlReport', 
           'reporting command line doesn\'t match expected output');        
           
      assertEq($workingDir, '', 
           'working directory doesn\'t match expected output');

  };
#  
  ntest "executeCloverInstrumentWithAllOptions", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeCloverInstrumentWithAllOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $instrumentCommandLine = $xpath->findvalue("//property[propertyName='cloverInstrumentCommandLine']/value");
      
      assertEq($instrumentCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java -cp "E:/clover-ant-3.0.2/clover-ant-3.0.2/lib/*" com.cenqua.clover.CloverInstr --instrumentation class --verbose --srcdir "E:/Electric Cloud/Plugins/emake/Java-Test-HelloWorld/src" --destdir "out" --initstring "e:/clover3_0_2.db"', 
           'instrument command line doesn\'t match expected output');
      
  };
  
  ntest "executeCloverInstrumentWithRequiredOptions", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeCloverInstrumentWithRequiredOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $instrumentCommandLine = $xpath->findvalue("//property[propertyName='cloverInstrumentCommandLine']/value");
      
      assertEq($instrumentCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java com.cenqua.clover.CloverInstr --srcdir "E:/Electric Cloud/Plugins/emake/Java-Test-HelloWorld/src" --destdir "out" --initstring "e:/clover3_0_2.db"', 
           'instrument command line doesn\'t match expected output');

  }; 
  
  ntest "executeCloverMergeWithAllOptions", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeCloverMergeWithAllOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $mergeCommandLine = $xpath->findvalue("//property[propertyName='cloverMergeCommandLine']/value");
      
      assertEq($mergeCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java -cp "E:/clover-ant-3.0.2/clover-ant-3.0.2/lib/*" com.cenqua.clover.CloverMerge -d --initstring new.db --verbose --update e:/clover3_0_2.db', 
           'merge command line doesn\'t match expected output');

  }; 
#  
  ntest "executeCloverMergeWithRequiredOptions", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeCloverMergeWithRequiredOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $mergeCommandLine = $xpath->findvalue("//property[propertyName='cloverMergeCommandLine']/value");
      
      assertEq($mergeCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java com.cenqua.clover.CloverMerge --initstring new.db e:/clover3_0_2.db', 
           'merge command line doesn\'t match expected output');

  }; 
  
  ntest "executeCloverReportWithAllOptions", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeCloverReportWithAllOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $reportCommandLine = $xpath->findvalue("//property[propertyName='cloverReportingCommandLine']/value");
      
      assertEq($reportCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java -cp "E:/clover-ant-3.0.2/clover-ant-3.0.2/lib/*" com.cenqua.clover.reporters.html.HtmlReporter --debug --verbose --initstring "e:/clover3_0_2.db" -p "E:/Electric Cloud/Plugins/emake/Java-Test-HelloWorld/src" -a -o report', 
           'report command line doesn\'t match expected output');

  }; 
#  
  ntest "executeCloverReportWithRequiredOptions", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeCloverReportWithRequiredOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $reportCommandLine = $xpath->findvalue("//property[propertyName='cloverReportingCommandLine']/value");
      
      assertEq($reportCommandLine, 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java com.cenqua.clover.reporters.console.ConsoleReporter --initstring "e:/clover3_0_2.db" -p "E:/Electric Cloud/Plugins/emake/Java-Test-HelloWorld/src"', 
           'instrument command line doesn\'t match expected output');
           
      my $workingDir = $xpath->findvalue("//property[propertyName='workingdirectory']/value");

  };
  
